{
  tokens=[
    SEMI=';'
    EQ='='
    LP='('
    RP=')'

    space='regexp:\s+'
    comment='regexp:(//.*)|(/\*(.|\w|\s)*\*/)'
    number='regexp:\d+(\.\d*)?'
    id='regexp:\p{Alpha}\w*'
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    op_1='+'
    op_2='-'
    op_3='*'
    op_4='/'
    op_5='!'
  ]

//  name(".*expr")='expression'
  extends(".*expr")=expr
}

root ::= root_item*
//private root_item ::= !<<eof>> property SEMI {pin=1 recoverWhile=property_recover}
private root_item ::= property SEMI {pin=1 recoverWhile=property_recover}

property ::= id '=' expr   { pin=2}
private property_recover ::= !(';' | id '=')

expr ::= factor plus_expr *
left plus_expr ::= plus_op factor { rightAssociative=true extends=expr}
private plus_op ::= '+'|'-'
private factor ::= primary mul_expr *
left mul_expr  ::= mul_op primary {extends=expr}
private mul_op ::= '*'|'/'
private primary ::= primary_inner factorial_expr ?
left factorial_expr ::= OP_5 {extends=expr}

private primary_inner ::= literal_expr | ref_expr | paren_expr {extends=expr}
paren_expr ::= '(' expr ')' {pin=1 extends=expr}
ref_expr ::= id {extends=expr}
literal_expr ::= number | string | float {extends=expr}