{
  tokens=[
    SEMI=';'
    COLON=':'
    DOT='.'
    COMMA=','
    EQ='='
    LP='('
    RP=')'
    LB='{'
    RB='}'

    // BOOLEAN
    LAZY_OR='||'
    OR='|'
    LAZY_AND='&&'
    AND='&'
    NOT="!"
    Q_MARK="?"

    white_space='regexp:\s+'
    NEW_LINE='regexp:\n'
    COMMENT='regexp:(//.*)|(/\*(.|\s)*?\*/)'
    INT='regexp:\d+?'
    FLOAT='regexp:\d+(\.\d*)?'
    BASE_TYPE='regexp:double|enumeration|int|list|real|string|url|var|date|point|rect|size'
    KEYWORD='regexp:import|bool'
    IDENTIFIER='regexp:[a-zA-Z_]\w*'
    STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    op_1='+'
    op_2='-'
    op_3='*'
    op_4='/'
  ]

//  name(".*expr")='expression'
//  extends(".*expr")=expr
    pin("import_.*")=1

    parserClass="com.qmlplugin.language.parser.QmlParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Qml"
    psiImplClassSuffix="Impl"
    psiPackage="com.qmlplugin.language.psi"
    psiImplPackage="com.qmlplugin.language.psi.impl"

    elementTypeHolderClass="com.qmlplugin.language.psi.QmlTypes"
    elementTypeClass="com.qmlplugin.language.psi.QmlElementType"
    tokenTypeClass="com.qmlplugin.language.psi.QmlTokenType"

    psiImplUtilClass="com.qmlplugin.language.psi.impl.QmlPsiImplUtil"
}


root ::= imports root_object (NEW_LINE | COMMENT)*
////root ::= imports
//root ::= qml_object
//
// IMPORTS
private imports ::= (NEW_LINE | COMMENT | (import_item SEMI?))*
import_item ::= "import" COMMENT* import_location ["as" identifier] {
    recoverWhile=import_item_recover
}
private import_item_recover ::= !(NEW_LINE | SEMI)

private import_location ::= import_version | import_path
import_version ::= import_name (FLOAT | INT)
import_name ::= identifier [DOT identifier] {
    pin=1
    recoverWhile=import_name_recover
}
private import_name_recover ::= !(NEW_LINE | FLOAT)
import_path ::= string

// OBJECT
root_object ::= object_name (NEW_LINE | COMMENT)* qml_object { pin(".*")=1}

//qml_object ::= object_name "{" (NEW_LINE | COMMENT | assignment_item (NEW_LINE | SEMI))*  "}" {
//qml_object ::= (LB (free_space | object_content)* RB)
qml_object ::= (LB (free_space | object_content)* RB)

object_content ::= id_field
                | enum_field
                | property_alias_field
                | property_field
                | signal_field
                | behavior
                | function_field
                | object_name (NEW_LINE | COMMENT)* (qml_object | assignment)
//private qml_object_recover ::= !("}" | <<eof>>)
id_field ::= "id" COLON identifier  {pin=1}
enum_field ::= "enum" IDENTIFIER LB IDENTIFIER (COMMA IDENTIFIER)* RB {pin=1}
property_alias_field ::= ["readonly"] "property" "alias" IDENTIFIER COLON dot_chain_name {pin=3}
property_field ::= ["readonly"] "property" (BASE_TYPE | IDENTIFIER) IDENTIFIER [COLON assignment_value] {pin=2}
signal_field ::= "signal" IDENTIFIER [LP (BASE_TYPE IDENTIFIER)? (COMMA BASE_TYPE IDENTIFIER)* RP]
behavior ::= "Behavior" "on" dot_chain_name (LB (free_space | (object_name qml_object))* RB)
function_field ::= "function" IDENTIFIER (LP IDENTIFIER? (COMMA IDENTIFIER)* RP) function_body
function_body ::= LB (function_item | free_space)* RB
function_item ::= dot_chain_name LP IDENTIFIER? (COMMA IDENTIFIER)* RP

object_name ::= identifier [DOT identifier]
left assignment ::= COLON assignment_value
assignment_value ::= NOT* (test | p_assignment_value)
private left test ::= p_assignment_value LAZY_OR p_assignment_value

private p_assignment_value ::= INT | FLOAT | STRING | dot_chain_name

//assignment_name ::= dotted_name
//private dotted_name ::= identifier [DOT identifier]
dot_chain_name ::= identifier (DOT identifier)*
private free_space ::= NEW_LINE | SEMI | COMMENT

// expressions

expression ::= conditionalExpression

conditionalExpression ::= logicalExpression ('?' expression ':' expression)*

private logicalExpression ::= equalityExpression (('||' | '&&' | '&') equalityExpression)*

private equalityExpression ::= relationalExpression (('==' | '===' | '!=') relationalExpression)*

private relationalExpression ::= additiveExpression (('<' | '>' | '<=' | '>=') additiveExpression)*

private additiveExpression ::= multiplicativeExpression (('+' | '-') multiplicativeExpression)*

private multiplicativeExpression ::= unaryExpression (('*' | '/' | '%') unaryExpression)*

unaryExpression ::= ('!' | '-' | 'typeof' | 'void' | 'delete')* primaryExpression

private primaryExpression ::= IDENTIFIER | INT | STRING | FLOAT | '(' expression ')'
//private identifier ::= ('a'..'z' | 'A'..'Z') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*
//private literal ::= '"' ('a'..'z' | 'A'..'Z' | '0'..'9')* '"' | ('0'..'9')+ ('.' ('0'..'9')+)?
